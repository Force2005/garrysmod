@name Follower
@inputs  
@outputs Force:vector AngForce:angle TargetPosX TargetPosY Dir:vector Angles:angle NewAng:angle
@persist Angles:angle Pos:vector Self:entity PosZ PosX PosY Pitch Yaw Roll HoverHeight FollowDistance
@trigger 

# For information about quaternion rotation handling:  http://www.wiremod.com/forum/expression-2-discussion-help/14103-short-quaternions-guide.html

#if(first()) {
    Self = entity()
    HoverHeight = 60
    FollowDistance = 20
    Self:setMass(1000)
#}

Angles = owner():eyeAngles() + ang(vec(-5, 0, 0))

# Gyroscope
CurrentQuat = quat(Self:angles()) #or just quat(Turret)
TargetQuat = quat(Angles)
Q = TargetQuat/CurrentQuat
Torque = Self:toLocal(rotationVector(Q) + Self:pos())

N = 100
M = 40
Self:applyTorque((Torque * N - Self:angVelVector() * M) * Self:inertia())



Point = owner():nearestPoint(Self:pos())
Dir = Point - Self:pos()
Point -= (Dir:normalized() * FollowDistance)

TargetPosX = Point[1]
TargetPosY = Point[2]
TargetPosZ = owner():pos()[3] + HoverHeight


# Hover / Friction
PosZ = Self:pos()[3]
PosX = Self:pos()[1]
PosY = Self:pos()[2]
Force = vec(TargetPosX - PosX - ($PosX * 5), TargetPosY - PosY - ($PosY * 5), TargetPosZ - PosZ - ($PosZ * 5))
Force *= Self:mass()


applyForce(Force)
applyAngForce(AngForce)

function checkChatCommands() {
    Command = owner():lastSaid()
    
    if(Command:left(2) == ">>") {
        SubCommand = Command:explode(">>")[2, string]
        if(SubCommand == "come") {
            print("Coming Closer")
            FollowDistance = 20
            HoverHeight = 60
        }
        elseif(SubCommand == "go") {
            print("Going Away")   
            FollowDistance = 200
            HoverHeight = 200
        }
    }
}


# Signals
if(chatClk(owner())) {
    checkChatCommands()
}

runOnChat(1)
runOnTick(1)
